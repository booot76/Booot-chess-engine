unit uBitBoards;

{$IFDEF FPC}
  {$MODE Delphi}
{$ENDIF}

 // Все что связано с работой битбордов - тут.

interface


 Type
  TBitboard = int64;
  T256 = array[0..255] of integer;

 Const
  VersionName='Booot 7.1';                    // Номер версии движка

  BitCountTable8 :T256 =                // Количество установленных в единицу битов в единичном байте от 0 до 255. Используется в системах где нет ассемблерной команды подсчета
   (0,1,1,2,1,2,2,3,1,2,2,3,2,3,3,4,
    1,2,2,3,2,3,3,4,2,3,3,4,3,4,4,5,
    1,2,2,3,2,3,3,4,2,3,3,4,3,4,4,5,
    2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6,
    1,2,2,3,2,3,3,4,2,3,3,4,3,4,4,5,
    2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6,
    2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6,
    3,4,4,5,4,5,5,6,4,5,5,6,5,6,6,7,
    1,2,2,3,2,3,3,4,2,3,3,4,3,4,4,5,
    2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6,
    2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6,
    3,4,4,5,4,5,5,6,4,5,5,6,5,6,6,7,
    2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6,
    3,4,4,5,4,5,5,6,4,5,5,6,5,6,6,7,
    3,4,4,5,4,5,5,6,4,5,5,6,5,6,6,7,
    4,5,5,6,5,6,6,7,5,6,6,7,6,7,7,8);

   white=0;
   black=1;
  // Кодируем поля
  a1= 0;b1= 1;c1= 2;d1= 3;e1= 4;f1= 5;g1= 6;h1= 7;
  a2= 8;b2= 9;c2=10;d2=11;e2=12;f2=13;g2=14;h2=15;
  a3=16;b3=17;c3=18;d3=19;e3=20;f3=21;g3=22;h3=23;
  a4=24;b4=25;c4=26;d4=27;e4=28;f4=29;g4=30;h4=31;
  a5=32;b5=33;c5=34;d5=35;e5=36;f5=37;g5=38;h5=39;
  a6=40;b6=41;c6=42;d6=43;e6=44;f6=45;g6=46;h6=47;
  a7=48;b7=49;c7=50;d7=51;e7=52;f7=53;g7=54;h7=55;
  a8=56;b8=57;c8=58;d8=59;e8=60;f8=61;g8=62;h8=63;
  // Декодируем поля
  DecodeSQ : array[a1..h8] of shortstring =
  ('a1','b1','c1','d1','e1','f1','g1','h1',
   'a2','b2','c2','d2','e2','f2','g2','h2',
   'a3','b3','c3','d3','e3','f3','g3','h3',
   'a4','b4','c4','d4','e4','f4','g4','h4',
   'a5','b5','c5','d5','e5','f5','g5','h5',
   'a6','b6','c6','d6','e6','f6','g6','h6',
   'a7','b7','c7','d7','e7','f7','g7','h7',
   'a8','b8','c8','d8','e8','f8','g8','h8'
  );
  Edge=-35604928818740737;

  RanksBB : array[1..8] of TBitboard = ($00000000000000FF,$000000000000FF00,$0000000000FF0000,$00000000FF000000,$000000FF00000000,$0000FF0000000000,$00FF000000000000,$FF00000000000000);
  FilesBB : array[1..8] of TBitboard = ($0101010101010101,$0202020202020202,$0404040404040404,$0808080808080808,$1010101010101010,$2020202020202020,$4040404040404040,$8080808080808080);

     Only : array[-1..h8] of TBitBoard =
(0,$0000000000000001,$0000000000000002,$0000000000000004,$0000000000000008,$0000000000000010,$0000000000000020,$0000000000000040,$0000000000000080,
$0000000000000100,$0000000000000200,$0000000000000400,$0000000000000800,$0000000000001000,$0000000000002000,$0000000000004000,$0000000000008000,
$0000000000010000,$0000000000020000,$0000000000040000,$0000000000080000,$0000000000100000,$0000000000200000,$0000000000400000,$0000000000800000,
$0000000001000000,$0000000002000000,$0000000004000000,$0000000008000000,$0000000010000000,$0000000020000000,$0000000040000000,$0000000080000000,
$0000000100000000,$0000000200000000,$0000000400000000,$0000000800000000,$0000001000000000,$0000002000000000,$0000004000000000,$0000008000000000,
$0000010000000000,$0000020000000000,$0000040000000000,$0000080000000000,$0000100000000000,$0000200000000000,$0000400000000000,$0000800000000000,
$0001000000000000,$0002000000000000,$0004000000000000,$0008000000000000,$0010000000000000,$0020000000000000,$0040000000000000,$0080000000000000,
$0100000000000000,$0200000000000000,$0400000000000000,$0800000000000000,$1000000000000000,$2000000000000000,$4000000000000000,$8000000000000000);

     KnightAttacks : array[a1..h8] of TBitBoard =
($0000000000020400,$0000000000050800,$00000000000A1100,$0000000000142200,$0000000000284400,$0000000000508800,$0000000000A01000,$0000000000402000,
$0000000002040004,$0000000005080008,$000000000A110011,$0000000014220022,$0000000028440044,$0000000050880088,$00000000A0100010,$0000000040200020,
$0000000204000402,$0000000508000805,$0000000A1100110A,$0000001422002214,$0000002844004428,$0000005088008850,$000000A0100010A0,$0000004020002040,
$0000020400040200,$0000050800080500,$00000A1100110A00,$0000142200221400,$0000284400442800,$0000508800885000,$0000A0100010A000,$0000402000204000,
$0002040004020000,$0005080008050000,$000A1100110A0000,$0014220022140000,$0028440044280000,$0050880088500000,$00A0100010A00000,$0040200020400000,
$0204000402000000,$0508000805000000,$0A1100110A000000,$1422002214000000,$2844004428000000,$5088008850000000,$A0100010A0000000,$4020002040000000,
$0400040200000000,$0800080500000000,$1100110A00000000,$2200221400000000,$4400442800000000,$8800885000000000,$100010A000000000,$2000204000000000,
$0004020000000000,$0008050000000000,$00110A0000000000,$0022140000000000,$0044280000000000,$0088500000000000,$0010A00000000000,$0020400000000000);

     KingAttacks : array[a1..h8] of TBitBoard =
($0000000000000302,$0000000000000705,$0000000000000E0A,$0000000000001C14,$0000000000003828,$0000000000007050,$000000000000E0A0,$000000000000C040,
$0000000000030203,$0000000000070507,$00000000000E0A0E,$00000000001C141C,$0000000000382838,$0000000000705070,$0000000000E0A0E0,$0000000000C040C0,
$0000000003020300,$0000000007050700,$000000000E0A0E00,$000000001C141C00,$0000000038283800,$0000000070507000,$00000000E0A0E000,$00000000C040C000,
$0000000302030000,$0000000705070000,$0000000E0A0E0000,$0000001C141C0000,$0000003828380000,$0000007050700000,$000000E0A0E00000,$000000C040C00000,
$0000030203000000,$0000070507000000,$00000E0A0E000000,$00001C141C000000,$0000382838000000,$0000705070000000,$0000E0A0E0000000,$0000C040C0000000,
$0003020300000000,$0007050700000000,$000E0A0E00000000,$001C141C00000000,$0038283800000000,$0070507000000000,$00E0A0E000000000,$00C040C000000000,
$0302030000000000,$0705070000000000,$0E0A0E0000000000,$1C141C0000000000,$3828380000000000,$7050700000000000,$E0A0E00000000000,$C040C00000000000,
$0203000000000000,$0507000000000000,$0A0E000000000000,$141C000000000000,$2838000000000000,$5070000000000000,$A0E0000000000000,$40C0000000000000);

     BishopFullAttacks : array[a1..h8] of TBitBoard =
($8040201008040200,$0080402010080500,$0000804020110A00,$0000008041221400,$0000000182442800,$0000010204885000,$000102040810A000,$0102040810204000,
$4020100804020002,$8040201008050005,$00804020110A000A,$0000804122140014,$0000018244280028,$0001020488500050,$0102040810A000A0,$0204081020400040,
$2010080402000204,$4020100805000508,$804020110A000A11,$0080412214001422,$0001824428002844,$0102048850005088,$02040810A000A010,$0408102040004020,
$1008040200020408,$2010080500050810,$4020110A000A1120,$8041221400142241,$0182442800284482,$0204885000508804,$040810A000A01008,$0810204000402010,
$0804020002040810,$1008050005081020,$20110A000A112040,$4122140014224180,$8244280028448201,$0488500050880402,$0810A000A0100804,$1020400040201008,
$0402000204081020,$0805000508102040,$110A000A11204080,$2214001422418000,$4428002844820100,$8850005088040201,$10A000A010080402,$2040004020100804,
$0200020408102040,$0500050810204080,$0A000A1120408000,$1400142241800000,$2800284482010000,$5000508804020100,$A000A01008040201,$4000402010080402,
$0002040810204080,$0005081020408000,$000A112040800000,$0014224180000000,$0028448201000000,$0050880402010000,$00A0100804020100,$0040201008040201);

     RookFullAttacks : array[a1..h8] of TBitBoard =
($01010101010101FF,$02020202020202FF,$04040404040404FF,$08080808080808FF,$10101010101010FF,$20202020202020FF,$40404040404040FF,$80808080808080FF,
$010101010101FF01,$020202020202FF02,$040404040404FF04,$080808080808FF08,$101010101010FF10,$202020202020FF20,$404040404040FF40,$808080808080FF80,
$0101010101FF0101,$0202020202FF0202,$0404040404FF0404,$0808080808FF0808,$1010101010FF1010,$2020202020FF2020,$4040404040FF4040,$8080808080FF8080,
$01010101FF010101,$02020202FF020202,$04040404FF040404,$08080808FF080808,$10101010FF101010,$20202020FF202020,$40404040FF404040,$80808080FF808080,
$010101FF01010101,$020202FF02020202,$040404FF04040404,$080808FF08080808,$101010FF10101010,$202020FF20202020,$404040FF40404040,$808080FF80808080,
$0101FF0101010101,$0202FF0202020202,$0404FF0404040404,$0808FF0808080808,$1010FF1010101010,$2020FF2020202020,$4040FF4040404040,$8080FF8080808080,
$01FF010101010101,$02FF020202020202,$04FF040404040404,$08FF080808080808,$10FF101010101010,$20FF202020202020,$40FF404040404040,$80FF808080808080,
$FF01010101010101,$FF02020202020202,$FF04040404040404,$FF08080808080808,$FF10101010101010,$FF20202020202020,$FF40404040404040,$FF80808080808080);

     QueenFullAttacks : array[a1..h8] of TBitBoard =
($81412111090503FF,$02824222120A07FF,$0404844424150EFF,$08080888492A1CFF,$10101011925438FF,$2020212224A870FF,$404142444850E0FF,$8182848890A0C0FF,
$412111090503FF03,$824222120A07FF07,$04844424150EFF0E,$080888492A1CFF1C,$101011925438FF38,$20212224A870FF70,$4142444850E0FFE0,$82848890A0C0FFC0,
$2111090503FF0305,$4222120A07FF070A,$844424150EFF0E15,$0888492A1CFF1C2A,$1011925438FF3854,$212224A870FF70A8,$42444850E0FFE050,$848890A0C0FFC0A0,
$11090503FF030509,$22120A07FF070A12,$4424150EFF0E1524,$88492A1CFF1C2A49,$11925438FF385492,$2224A870FF70A824,$444850E0FFE05048,$8890A0C0FFC0A090,
$090503FF03050911,$120A07FF070A1222,$24150EFF0E152444,$492A1CFF1C2A4988,$925438FF38549211,$24A870FF70A82422,$4850E0FFE0504844,$90A0C0FFC0A09088,
$0503FF0305091121,$0A07FF070A122242,$150EFF0E15244484,$2A1CFF1C2A498808,$5438FF3854921110,$A870FF70A8242221,$50E0FFE050484442,$A0C0FFC0A0908884,
$03FF030509112141,$07FF070A12224282,$0EFF0E1524448404,$1CFF1C2A49880808,$38FF385492111010,$70FF70A824222120,$E0FFE05048444241,$C0FFC0A090888482,
$FF03050911214181,$FF070A1222428202,$FF0E152444840404,$FF1C2A4988080808,$FF38549211101010,$FF70A82422212020,$FFE0504844424140,$FFC0A09088848281);

     PawnAttacks : array[white..black,a1..h8] of TBitBoard =
(($0000000000000200,$0000000000000500,$0000000000000A00,$0000000000001400,$0000000000002800,$0000000000005000,$000000000000A000,$0000000000004000,
$0000000000020000,$0000000000050000,$00000000000A0000,$0000000000140000,$0000000000280000,$0000000000500000,$0000000000A00000,$0000000000400000,
$0000000002000000,$0000000005000000,$000000000A000000,$0000000014000000,$0000000028000000,$0000000050000000,$00000000A0000000,$0000000040000000,
$0000000200000000,$0000000500000000,$0000000A00000000,$0000001400000000,$0000002800000000,$0000005000000000,$000000A000000000,$0000004000000000,
$0000020000000000,$0000050000000000,$00000A0000000000,$0000140000000000,$0000280000000000,$0000500000000000,$0000A00000000000,$0000400000000000,
$0002000000000000,$0005000000000000,$000A000000000000,$0014000000000000,$0028000000000000,$0050000000000000,$00A0000000000000,$0040000000000000,
$0200000000000000,$0500000000000000,$0A00000000000000,$1400000000000000,$2800000000000000,$5000000000000000,$A000000000000000,$4000000000000000,
$0000000000000000,$0000000000000000,$0000000000000000,$0000000000000000,$0000000000000000,$0000000000000000,$0000000000000000,$0000000000000000),
($0000000000000000,$0000000000000000,$0000000000000000,$0000000000000000,$0000000000000000,$0000000000000000,$0000000000000000,$0000000000000000,
$0000000000000002,$0000000000000005,$000000000000000A,$0000000000000014,$0000000000000028,$0000000000000050,$00000000000000A0,$0000000000000040,
$0000000000000200,$0000000000000500,$0000000000000A00,$0000000000001400,$0000000000002800,$0000000000005000,$000000000000A000,$0000000000004000,
$0000000000020000,$0000000000050000,$00000000000A0000,$0000000000140000,$0000000000280000,$0000000000500000,$0000000000A00000,$0000000000400000,
$0000000002000000,$0000000005000000,$000000000A000000,$0000000014000000,$0000000028000000,$0000000050000000,$00000000A0000000,$0000000040000000,
$0000000200000000,$0000000500000000,$0000000A00000000,$0000001400000000,$0000002800000000,$0000005000000000,$000000A000000000,$0000004000000000,
$0000020000000000,$0000050000000000,$00000A0000000000,$0000140000000000,$0000280000000000,$0000500000000000,$0000A00000000000,$0000400000000000,
$0002000000000000,$0005000000000000,$000A000000000000,$0014000000000000,$0028000000000000,$0050000000000000,$00A0000000000000,$0040000000000000));

 var
  pboard : array[0..99] of integer;
  W00Sq,W000SQ,B00SQ,B000SQ,DarkSquaresBB,LightSquaresBB,ABCDBB,EFGHBB,CenterBB : TBitBoard;
  InterSect,FullLine: array[a1..h8,a1..h8] of TBitBoard;
  SquareDist,FileDist : array[a1..h8,a1..h8] of byte;
  ForwardBB,PasserBB : array[white..black,a1..h8] of TBitBoard;
  IsolatedBB : array[a1..h8] of TBitBoard;
  OutPostBB,SpaceBB,BishopBLockedBB : array[white..black] of TBitBoard;

 function pext(BB:TBitBoard;mask : TBitBoard):integer;
 function BitCount(BB:TBitBoard): Integer;
 function BitScanForward(BB:TBitBoard): Integer;
 function BitScanBackward(BB:TBitBoard): Integer;
 procedure PrintBitboard(BB : TBitboard);

implementation
 uses uMagic,uBoard,uHash,uKPK;

function pext(BB:TBitBoard;mask : TBitBoard):integer;{$IFDEF FPC} nostackframe assembler;{$ENDIF}
//               rcx (rdi)           rdx(rsi)
asm
 {$IFNDEF FPC}
  .noframe
 {$ENDIF}

 {$IFDEF UNIX}
  db 0c4h,0e2h,0c2h,0f5h,0c6h             // pext rax,rdi,rsi
 {$ELSE UNIX}
  db 0c4h,0e2h,0f2h,0f5h,0c2h             // pext rax,rcx,rdx
 {$ENDIF UNIX}
end;
function BitCount(BB:TBitBoard): Integer;{$IFDEF FPC} nostackframe assembler;{$ENDIF}
  // Функция подсчета "1"- битов в битборде.
  // На входе - битбоард, на выходе - число битов, установленных в "1"
  asm
   {$IFNDEF FPC}
  .noframe
  {$ENDIF}
   popcnt rax, qword ptr bb;    // Быстрая 64-битная ассемблерная функция
  end;

 function BitScanForward(BB:TBitBoard): Integer;{$IFDEF FPC} nostackframe assembler;{$ENDIF}
  // Ассемблерная процедура поиска единичного бита в битборде.
  // поиск осуществляется "вперед",т.е от 0 до 63 бита
  // На входе- битбоард (ненулевой!), на выходе - номер первого найденого "1"-бита.
  // Если подать нулевой битбоард - на выходе 0 (возможна ошибка!!!)

   asm
  {$IFNDEF FPC}
  .noframe
  {$ENDIF}
    bsf rax,qword ptr bb                  // 64 версия
   end;


 function BitScanBackward(BB:TBitBoard): Integer;{$IFDEF FPC} nostackframe assembler;{$ENDIF}
  // Ассемблерная процедура поиска единичного бита в битборде
  // поиск осуществляется "назад",т.е от 63 до 1 бита
  //На входе - битбоард(ненулевой!), на выходе - номер первого найденого "1"-бита.
  // Если подать нулевой битбоард - на выходе 0 (возможна ошибка!!!)

    asm
  {$IFNDEF FPC}
  .noframe
  {$ENDIF}
     bsr rax,qword ptr bb                 // 64 версия
    end;



 procedure PrintBitboard(BB : TBitboard);
  // Процедура печати битборда на экран в символьном виде в виде доски
  var
    BitMassiv : array[1..64] of char; // Массив символов для печати битборда
    i,j: byte;
  begin
    for i:=a1 to h8 do
      begin
       if (Only[i] and BB) = 0
                        then BitMassiv[i+1]:='.'
                        else BitMassiv[i+1]:='X';
       // Заполняем следующую ячейку массива соответствующим символом
      end;
    // Печатаем соответствующий массив в виде доски
    for j:=7 downto 0 do
      begin
        write(j+1,'  '); // Подписываем горизонтали
        for i:=1 to 8 do
          write(BitMassiv[j*8+i]);
        writeln;
      end;
    //И подписываем вертикали
    writeln('   abcdefgh');
  end;


 Procedure BitBoards_Init;
  // Инициализация констант для битбордов
  var
   i,j,n,k,sq,x1,y1,x2,y2:integer;
   temp : TBitBoard;
   begin
    Randomize;
    // Заполняем массив растояний полей друг от друга
    for i:=a1 to h8 do
    for j:=a1 to h8 do
      begin
        x1:=Posx[i];y1:=Posy[i];
        x2:=Posx[j];y2:=Posy[j];
        n:=x1-x2;
        if n<0 then n:=-n;
        k:=y1-y2;
        if k<0 then k:=-k;
        if n>k
          then SquareDist[i,j]:=n
          else SquareDist[i,j]:=k;
        FileDist[i,j]:=abs(x1-x2);
      end;
    // заполняем проверочную доску
     for i:=0 to 99 do
      pboard[i]:=-1;
     n:=0;
     for i:=1 to 8 do
     for j:=1 to 8 do
       begin
         pboard[j*10+i]:=n;
         n:=n+1;
       end;
     MagicsInit;
     W00SQ:=Only[f1] or Only[g1];
     W000SQ:=Only[b1] or Only[c1] or Only[d1];
     B00SQ:=Only[f8] or Only[g8];
     B000SQ:=Only[b8] or Only[c8] or Only[d8];
     LightSquaresBB:=Only[b1] or Only[d1] or Only[f1] or Only[h1] or Only[a2] or Only[c2] or Only[e2] or Only[g2] or Only[b3] or Only[d3] or Only[f3] or Only[h3] or Only[a4] or Only[c4] or Only[e4] or Only[g4] or
                     Only[b5] or Only[d5] or Only[f5] or Only[h5] or Only[a6] or Only[c6] or Only[e6] or Only[g6] or Only[b7] or Only[d7] or Only[f7] or Only[h7] or Only[a8] or Only[c8] or Only[e8] or Only[g8];
     DarkSquaresBB:=Only[a1] or Only[c1] or Only[e1] or Only[g1] or Only[b2] or Only[d2] or Only[f2] or Only[h2] or Only[a3] or Only[c3] or Only[e3] or Only[g3] or Only[b4] or Only[d4] or Only[f4] or Only[h4] or
                    Only[a5] or Only[c5] or Only[e5] or Only[g5] or Only[b6] or Only[d6] or Only[f6] or Only[h6] or Only[a7] or Only[c7] or Only[e7] or Only[g7] or Only[b8] or Only[d8] or Only[f8] or Only[h8];
     OutPostBB[white]:=(RanksBB[4] or RanksBB[5] or RanksBB[6]) and (not(FilesBB[1] or FilesBB[8]));
     OutPostBB[black]:=(RanksBB[5] or RanksBB[4] or RanksBB[3]) and (not(FilesBB[1] or FilesBB[8]));
     SpaceBB[white]:=(FilesBB[3] or FilesBB[4] or FilesBB[5] or FilesBB[6]) and (RanksBB[2] or RanksBB[3] or RanksBB[4]);
     SpaceBB[black]:=(FilesBB[3] or FilesBB[4] or FilesBB[5] or FilesBB[6]) and (RanksBB[5] or RanksBB[6] or RanksBB[7]);
     ABCDBB:=FilesBB[1] or FilesBB[2] or FilesBB[3] or FilesBB[4];
     EFGHBB:=FilesBB[5] or FilesBB[6] or FilesBB[7] or FilesBB[8];
     BishopBlockedBB[white]:=(FilesBB[3] or FilesBB[4] or FilesBB[5] or FilesBB[6]);
     BishopBlockedBB[black]:=(FilesBB[3] or FilesBB[4] or FilesBB[5] or FilesBB[6]);
     CenterBB:=Only[e4] or Only[d4] or Only[e5] or Only[d5];
     For i:=a1 to h8 do
      For j:=a1 to h8 do
       begin
        InterSect[i,j]:=0;
        FullLine[i,j]:=0;
       end;
     for i:=a1 to h8 do
       for j:=a1 to h8 do
        if (i<>j) and ((KingAttacks[i] and Only[j])=0) and ((QueenFullAttacks[i] and Only[j])<>0) then
         begin
           temp:=0;
           if int8(i-j) in [2,3,4,5,6,7] then n:=-1 else
           if int8(j-i) in [2,3,4,5,6,7] then n:=1 else
           if int8(i-j) in [16,24,32,40,48,56] then n:=-8 else
           if int8(j-i) in [16,24,32,40,48,56] then n:=8 else
           if int8(i-j) in [18,27,36,45,54,63] then n:=-9 else
           if int8(j-i) in [18,27,36,45,54,63] then n:=9 else
           if int8(i-j) in [14,21,28,35,42,49] then n:=-7 else
           if int8(j-i) in [14,21,28,35,42,49] then n:=7;
           sq:=i+n;
           while sq<>j do
             begin
               temp:=temp or Only[sq];
               sq:=sq+n;
             end;
           Intersect[i,j]:=temp;
         end;
     For i:=a1 to h8 do
     For j:=a1 to h8 do
       begin
         If (BishopFullAttacks[i] and Only[j])<>0 then  FullLine[i,j]:=(BishopFullAttacks[i] and BishopFullAttacks[j]) or Only[i] or Only[j];
         If (RookFullAttacks[i] and Only[j])<>0   then  FullLine[i,j]:=(RookFullAttacks[i] and RookFullAttacks[j]) or Only[i] or Only[j];
       end;
     for i:=a1 to h8 do
       begin
         x1:=Posx[i];y1:=Posy[i];
         ForwardBB[white,i]:=0;ForwardBB[black,i]:=0;
         for j:=y1+1 to 8  do
           ForwardBB[white,i]:=ForwardBB[white,i] or RanksBB[j];
         for j:=y1-1 downto 1  do
           ForwardBB[black,i]:=ForwardBB[black,i] or RanksBB[j];
         IsolatedBB[i]:=0;
         If x1>1 then IsolatedBB[i]:=IsolatedBB[i] or FilesBB[x1-1];
         If x1<8 then IsolatedBB[i]:=IsolatedBB[i] or FilesBB[x1+1];
         PasserBB[white,i]:=(IsolatedBB[i] or FilesBB[x1]) and ForwardBB[white,i];
         PasserBB[black,i]:=(IsolatedBB[i] or FilesBB[x1]) and ForwardBB[black,i];
       end;
     KPKAnalyze;
   end;

initialization
  BitBoards_Init;
end.

